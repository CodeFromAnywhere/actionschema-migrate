{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "definitions": {
    "OpenapiConfig": {
      "type": "object",
      "properties": {
        "slug": { "type": "string" },
        "openapiUrlOrPath": {
          "type": "string",
          "description": "Can be an URL or relative path, leading to an OpenAPI specification."
        },
        "envKeyName": {
          "type": "string",
          "description": "Provide an authorization key that is available as environment variable, to be used as Authorization header (bearer by default) \n\n If not given, will not include an Authorization header"
        },
        "operationIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "If given, selects only these operationIds from the openapi."
        }
      },
      "additionalProperties": false,
      "required": ["slug", "openapiUrlOrPath"]
    }
  },
  "properties": {
    "$schema": {
      "type": "string",
      "format": "uri-reference"
    },

    "useJsImportSuffix": {
      "type": "boolean",
      "description": "If true, adds .js to imports"
    },

    "relativeOutputPath": {
      "type": "string",
      "description": "Folder directory where SDK should end up"
    },

    "crudSlugPrefix": {
      "type": "string",
      "description": "Prefix to use for slugs. Can be useful to keep proper naming"
    },

    "relativeJsonSchemaBasePath": {
      "type": "string",
      "description": "Any JSON schemas we need in typescript"
    },

    "remoteJsonSchemaUrls": {
      "type": "array",
      "items": { "type": "string" }
    },

    "openapis": {
      "type": "array",
      "items": { "$ref": "#/definitions/OpenapiConfig" },
      "description": "Remote or local (partial) OpenAPIs that need to be included in the SDK."
    },

    "agentConfig": {
      "description": "Agents that are based on the openapi generated in this server. Each agent will be made available in openapi as well (by proxy). If given, requires OPENAI_SECRET, OPENAPI_SECRET, ADMIN_SECRET env variables to be present, as well as a token [SLUG]_SECRET for every slug",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "openapiUrl": { "type": "string" },
        "agents": {
          "description": "An object with slugs as keys and values are the agent settings.",
          "additionalProperties": {
            "type": "object",
            "properties": {
              "instructions": {
                "type": "string",
                "description": "Instructions for the agent. Instead, you can also use markdown to store the instructions."
              },
              "model": { "type": "string" },
              "operationIds": { "type": "array", "items": { "type": "string" } }
            },
            "required": [],
            "additionalProperties": false
          }
        },
        "slugPrefix": { "type": "string" },
        "relativeAgentBasePath": {
          "type": "string",
          "description": "If given, the instructions can be found here in [slug].md for each slug"
        }
      },
      "required": ["openapiUrl", "agents", "slugPrefix"]
    },

    "relativeFilePromptBasePath": {
      "type": "string",
      "description": "File prompts that need to be accessible through the actionschema CLI"
    },

    "remoteFilePromptUrls": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },

    "relativeCrudSchemaBasePath": {
      "type": "string",
      "description": "CRUD schemas we need to be a CRUD API"
    },
    "remoteCrudSchemaUrls": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "customCrudServer": {
      "type": "string"
    }
  },
  "additionalProperties": false
}
